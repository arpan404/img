import os
from google import genai
import uuid
import pyttsx3
import re
from gtts import gTTS
from pydub import AudioSegment


class Content:
    def __generate_audio(self, text: str) -> str | None:
        """
        Returns the path of the audio file generated by gtts or None if an error occurs.
        """
        try:
            if not os.path.exists(os.path.join(os.getcwd(), "temp")):
                os.mkdir(os.path.join(os.getcwd(), "temp"))

            audio_path = os.path.join(
                os.getcwd(), "temp", f'{self.__content_id}.mp3')
            tts = gTTS(text=text, lang='en', slow=False)
            tts.save(audio_path)
            return audio_path
        except Exception as e:
            print(e)
            return None

    def __speed_up_audio(self, input_path: str, output_path: str, speed: float = 1.5) -> bool:
        """
        Speeds up the audio file using pydub.
        """
        try:
            audio = AudioSegment.from_file(input_path)
            sped_up_audio = audio.speedup(playback_speed=speed)
            sped_up_audio.export(output_path, format="mp3")
            return True
        except Exception as e:
            print(e)
            return False

    def __generate_video(self, prompt: str) -> str | None:
        return None

    def __generate_story(self, prompt: str):
        """
        Returns the content (story) generated by Gemini or None if an error occurs.
        """
        try:
            api_key = os.getenv("GEMINI_API_KEY")
            client = genai.Client(api_key=api_key)
            response = client.models.generate_content(
                model='gemini-2.0-flash-001', contents=prompt
            )
            print(response.text)
            self.__story = re.sub(r'\(.*?\)', '', response.text)
            return response.text

        except Exception as e:
            print(e)

    def generate(self, style: dict) -> str | None:
        self.__content_id = str(uuid.uuid4())
        self.__style = style
        self.__audio__speed = 1.2
        self.__generate_story(style['prompt'])
        print(self.__story)
        generated_audio_path = self.__generate_audio(self.__story)
        if generated_audio_path is None:
            print("Error generating audio")
            raise Exception("Error generating audio")
        sped_up_audio_path = os.path.join(
            os.getcwd(), "temp", f'{self.__content_id}_sped_up.mp3')

        if not self.__speed_up_audio(generated_audio_path, sped_up_audio_path, self.__audio__speed):
            print("Error speeding up audio")
            raise Exception("Error speeding up audio")
        pass
